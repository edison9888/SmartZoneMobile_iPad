////  MainMenuController.m//  MobileKate2.0_iPad////  Created by Kyung Wook Baek on 11. 2. 17..//  Copyright 2011 ktds. All rights reserved.//#import "MainMenuController.h"#import <QuartzCore/QuartzCore.h>#import "CustomBadge.h"#import "URL_Define.h"#import "LogInController.h"#import "WebController.h"#import "TestViewController.h"#import "eisWebViewController.h"#import "SearchEmployeeRoot.h"#define PAGE 2@implementation MainMenuController//@synthesize menuObject;//@synthesize payment, setting, notice, searchEmployee, qna ,openFlowViewCtrl;@synthesize openFlowViewCtrl;@synthesize executiveStaffLabel;@synthesize stypePicker = _stypePicker;@synthesize stypePickerPopover = _stypePickerPopover;@synthesize comboBoxButton, combobox;@synthesize orientations;/* @synthesize withBadge; @synthesize bpmBadge; @synthesize hrmBadge; @synthesize paymentBadge; @synthesize candyBadge; @synthesize landWithBadge; @synthesize landHrmBadge; @synthesize landBpmBadge; @synthesize landpaymentBadge; @synthesize landCandyBadge; */ @synthesize badge;@synthesize cm;@synthesize paymentCount;@synthesize stockString;//// paging//@synthesize iconMenuView;//@synthesize menuScrollView;//@synthesize pageControl;//@synthesize landstockArrow;//@synthesize imgView_stockArrow;// The designated initializer.  Override if you create the controller programmatically and want to perform customization that is not appropriate for viewDidLoad./* - (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil { self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil]; if (self) { // Custom initialization. } return self; } *//* - (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation { // Return YES for supported orientations return YES; } */- (IBAction)testAction {    TestViewController *testController = [[TestViewController alloc] init];        MobileKate2_0_iPadAppDelegate *appdelegate = (MobileKate2_0_iPadAppDelegate *)[[UIApplication sharedApplication] delegate];    appdelegate.window.rootViewController = testController;}// Implement viewDidLoad to do additional setup after loading the view, typically from a nib.- (void)viewDidLoad {    NSDate *now = [[NSDate alloc] init];	NSLog(@"asdh;flaksdf%@", now);        // 날짜 포맷.	NSDateFormatter *dateFormat = [[NSDateFormatter alloc] init];	[dateFormat setDateFormat:@"MM-dd"];			NSString *theDate = [dateFormat stringFromDate:now];//	NSLog(@"theDate[%@]",theDate);    NSArray *tempArray = [theDate componentsSeparatedByCharactersInSet:[NSCharacterSet characterSetWithCharactersInString:@"-"]];    NSString *stringMonth =  [tempArray objectAtIndex:0];    NSString *stringDay =  [tempArray objectAtIndex:1];    if ([stringMonth isEqualToString:@"01"]) {        monthLabel.text = @"JAN";    }else if([stringMonth isEqualToString:@"02"]){        monthLabel.text = @"FEB";    }else if([stringMonth isEqualToString:@"03"]){        monthLabel.text = @"MAR";    }else if([stringMonth isEqualToString:@"04"]){        monthLabel.text = @"APR";    }else if([stringMonth isEqualToString:@"05"]){        monthLabel.text = @"MAY";    }else if([stringMonth isEqualToString:@"06"]){        monthLabel.text = @"JUN";    }else if([stringMonth isEqualToString:@"07"]){        monthLabel.text = @"JUL";    }else if([stringMonth isEqualToString:@"08"]){        monthLabel.text = @"AUG";    }else if([stringMonth isEqualToString:@"09"]){        monthLabel.text = @"SEP";    }else if([stringMonth isEqualToString:@"10"]){        monthLabel.text = @"OCT";    }else if([stringMonth isEqualToString:@"11"]){        monthLabel.text = @"NOV";    }else if([stringMonth isEqualToString:@"12"]){        monthLabel.text = @"DEC";    }            dateLabel.text =  stringDay;            	        [dateFormat release];	[now release];	noti = [NSNotificationCenter defaultCenter];	[noti addObserver:self selector:@selector(returnHomeView) name:@"returnHomeView" object:nil];		[noti addObserver:self selector:@selector(PaymentCtrl) name:@"PaymentCtrl" object:nil];	[noti addObserver:self selector:@selector(StockCtrl)name:@"StockCtrl" object:nil];	[noti addObserver:self selector:@selector(SettingCtrl) name:@"SettingCtrl" object:nil];	[noti addObserver:self selector:@selector(BoardCtrl) name:@"BoardCtrl" object:nil];    [noti addObserver:self selector:@selector(CalendarCtrl) name:@"CalendarCtrl" object:nil];	[noti addObserver:self selector:@selector(QnACtrl) name:@"QnACtrl" object:nil];	[noti addObserver:self selector:@selector(SearchEmployeeCtrl) name:@"SearchEmployeeCtrl" object:nil];	//self.menuObject = [[NSMutableDictionary alloc] init];	[noti addObserver:self selector:@selector(customTabWebView) name:@"customTabWebView" object:nil];    [noti addObserver:self selector:@selector(MailCtrl:) name:@"MailCtrl" object:nil];    [noti addObserver:self selector:@selector(ContactsCtrl:) name:@"ContactsCtrl:" object:nil];    [noti addObserver:self selector:@selector(EISCtrl) name:@"EISCtrl" object:nil];    [noti addObserver:self selector:@selector(ORGNaviCtrl) name:@"ORGNaviCtrl" object:nil];	//paymentXib = [[PaymentSplitViewController alloc] init];	//[paymentXib retain];	//[self.menuObject setObject:paymentXib forKey:@"paymentXib"];	//[paymentXib release];		//boardXib = [[NoticeSplitViewController alloc]init];	//[boardXib retain];	//[self.menuObject setObject:boardXib forKey:@"boardXib"];	//[boardXib release];		// -- modified by ispark -- //	//qnaXib = [[QnASplitViewController alloc]init];	//qnaXib = [[FAQSplitViewController alloc]init];	//[qnaXib retain];	//[self.menuObject setObject:qnaXib forKey:@"qnaXib"];	//[qnaXib release];		//webXib = [[WebController alloc] initWithNibName:@"WebController" bundle:nil];	//[webXib retain];	//[self.menuObject setObject:webXib forKey:@"webXib"];	//[webXib release];		//searchEmployeeXib = [[SearchEmployeeSplitView alloc]initWithNibName:@"searchEmployeeXib" bundle:nil];	searchEmployeeXib = [[SearchEmployeeSplitView alloc] init];	[searchEmployeeXib retain];	//NSLog(@"searchEmployeeXib retain : %d", [searchEmployeeXib retainCount]);	//[self.menuObject setObject:searchEmployeeXib forKey:@"searchEmployeeXib"];	//[searchEmployeeXib release];		[noti addObserver:self selector:@selector(imageSelect) name:@"imageSelect" object:nil];	[noti addObserver:self selector:@selector(inputCheckSearch) name:@"inputCheckSearch" object:nil];	[noti addObserver:self selector:@selector(imageSelectBadge) name:@"imageSelectBadge" object:nil];	[noti addObserver:self selector:@selector(imageMoveBadge) name:@"imageMoveBadge" object:nil];    	Clipboard *clipboard = [Clipboard sharedClipboard];	[clipboard clipValue:@"이 름" clipKey:@"stype"];    	self.orientations = @"1";    	self.openFlowViewCtrl = [[AFOpenFlowViewController alloc] init];//	openFlowViewCtrl.view.frame = CGRectMake(0, 120, 1023, 657);    openFlowViewCtrl.view.frame = CGRectMake(0, 160, 1024, 630);	openFlowViewCtrl.view.hidden = YES;    	[self.view addSubview:openFlowViewCtrl.view];	//[openFlowViewCtrl release];	//[openFlowViewCtrl retain];	    //    // paging    //	self.menuScrollView.contentSize = CGSizeMake(768*PAGE, 906);    //	self.pageControl.numberOfPages = PAGE;    //	if (PAGE <= 1) {    //		self.pageControl.hidden = YES;    //	} else {    //		self.pageControl.hidden = NO;    //	}    //	self.menuScrollView.delegate = self;    //	[self.menuScrollView addSubview:iconMenuView];    	[super viewDidLoad];}-(void)imageMoveBadge{    //image 이동할때 미리 제거 	Clipboard *clip = [Clipboard sharedClipboard];	NSString *moveIndex = [clip clipKey:@"imageMoveBadge"];		int intMoveIndex = [moveIndex intValue];	switch (intMoveIndex) {		case 1:			landHrmBadge.hidden = YES;			landWithBadge.hidden = YES;			landBpmBadge.hidden = YES;			landstockArrow.hidden = YES;			landCandyBadge.hidden = YES;			break;		case 2:			landHrmBadge.hidden = YES;			landWithBadge.hidden = YES;			landpaymentBadge.hidden = YES;			landstockArrow.hidden = YES;			landCandyBadge.hidden = YES;			break;		case 4:			landBpmBadge.hidden = YES;			landWithBadge.hidden = YES;			landpaymentBadge.hidden = YES;			landstockArrow.hidden = YES;			landCandyBadge.hidden = YES;			break;		case 3:			landBpmBadge.hidden = YES;			landHrmBadge.hidden = YES;			landpaymentBadge.hidden = YES;			landstockArrow.hidden = YES;			landCandyBadge.hidden = YES;			break;		case 6:			landHrmBadge.hidden = YES;			landBpmBadge.hidden = YES;			landWithBadge.hidden = YES;			landpaymentBadge.hidden = YES;			landCandyBadge.hidden = YES;			break;		case 12:			landHrmBadge.hidden = YES;			landBpmBadge.hidden = YES;			landWithBadge.hidden = YES;			landpaymentBadge.hidden = YES;			landstockArrow.hidden = YES;			break;		default:			landBpmBadge.hidden = YES;			landHrmBadge.hidden = YES;			landWithBadge.hidden = YES;			landpaymentBadge.hidden = YES;			landstockArrow.hidden = YES;			landCandyBadge.hidden = YES;			break;	}	}-(void)imageSelectBadge{		[NSThread detachNewThreadSelector:@selector(imageSelectBadgeThread) toTarget:self withObject:nil];    //메인 말고 다른 쓰레드로 돌림    }-(void)imageSelectBadgeThread{		NSAutoreleasePool *tmpPool = [[NSAutoreleasePool alloc] init];    //커버플로우 메뉴가 센터에 위치했을때 나타남	Clipboard *clip = [Clipboard sharedClipboard];	NSString *centerIndex = [clip clipKey:@"imageIndexBadge"];		landBpmBadge.hidden = YES;	landHrmBadge.hidden = YES;	landWithBadge.hidden = YES;	landpaymentBadge.hidden = YES;	landstockArrow.hidden = YES;	landCandyBadge.hidden = YES;	    // 커버플로우 모드인 경우에 수행 	if ([self.orientations isEqualToString:@"3"] || [self.orientations isEqualToString:@"4"]) {				int intCenterIndex = [centerIndex intValue];				if (intCenterIndex == 1 || intCenterIndex == 2 || intCenterIndex == 3 || intCenterIndex == 4 || intCenterIndex == 6 || intCenterIndex == 12) {			switch (intCenterIndex) {									case 1:					                    					landHrmBadge.hidden = YES;					landWithBadge.hidden = YES;					landBpmBadge.hidden = YES;					landstockArrow.hidden = YES;					landCandyBadge.hidden = YES;					landpaymentBadge.hidden = NO;					/*                     if (landpaymentBadge.superview != nil) {                     //landpaymentBadge.hidden = NO;                     [self.view bringSubviewToFront:landpaymentBadge];                                          }                     else {                     if (self.paymentCount) {                                          if ([self.paymentCount isEqualToString:@"0"] || [self.paymentCount isEqualToString:@"(null)"]) {                                          }                     else {                     if ([paymentCount intValue]>50) {                     landpaymentBadge = [CustomBadge customBadgeWithString:@"landPayment"];                     [landpaymentBadge setFrame:CGRectMake(610, 210, landpaymentBadge.frame.size.width, landpaymentBadge.frame.size.height)];                     [self.view addSubview:landpaymentBadge];                     [landpaymentBadge autoBadgeSizeWithString:@"50+"];                     }                     else {                     landpaymentBadge = [CustomBadge customBadgeWithString:@"landPayment"];                     [landpaymentBadge setFrame:CGRectMake(610, 210, landpaymentBadge.frame.size.width, landpaymentBadge.frame.size.height)];                     [self.view addSubview:landpaymentBadge];                     [landpaymentBadge autoBadgeSizeWithString:self.paymentCount];                     }                                                                                    [landpaymentBadge retain];	                     }                     }                     else {                     }                     }                     /*                     landpaymentBadge.hidden = YES;                     [landpaymentBadge removeFromSuperview];                     landpaymentBadge = nil;                     [landpaymentBadge release];                                          if (self.paymentCount) {                     if ([self.paymentCount isEqualToString:@"0"] || [self.paymentCount isEqualToString:@"(null)"]) {                                          }                     else {                     if ([paymentCount intValue]>50) {                     landpaymentBadge = nil;                     //landpaymentBadge = [CustomBadge customBadgeWithString:@"landPayment"];                     landpaymentBadge = [CustomBadge customBadgeWithString:@"50+"];                     [landpaymentBadge setFrame:CGRectMake(610, 210, landpaymentBadge.frame.size.width, landpaymentBadge.frame.size.height)];                     [self.view addSubview:landpaymentBadge];                     //[landpaymentBadge autoBadgeSizeWithString:@"50+"];                     }                     else {                     landpaymentBadge = nil;                     //landpaymentBadge = [CustomBadge customBadgeWithString:@"landPayment"];                     landpaymentBadge = [CustomBadge customBadgeWithString:self.paymentCount];                     [landpaymentBadge setFrame:CGRectMake(610, 210, landpaymentBadge.frame.size.width, landpaymentBadge.frame.size.height)];                     [self.view addSubview:landpaymentBadge];                     //[landpaymentBadge autoBadgeSizeWithString:self.paymentCount];                     }                     [landpaymentBadge retain];	                     }                     }                     */					break;				case 3:										landHrmBadge.hidden = YES;					landWithBadge.hidden = YES;					landpaymentBadge.hidden = YES;					landstockArrow.hidden = YES;					landCandyBadge.hidden = YES;										landBpmBadge.hidden = NO;					/*                     if (landBpmBadge.superview !=nil) {                     landBpmBadge.hidden = NO;                                          [self.view bringSubviewToFront:landBpmBadge];                     }                     else {                     if (self.badge) {                     NSString * bpmBadgeData = [NSString stringWithFormat:@"%@", [[self.badge objectAtIndex:0] objectForKey:@"badgecount"]];                                          if ([bpmBadgeData isEqualToString:@"0"] || [bpmBadgeData isEqualToString:@"(null)"]) {                                          }                     else {                     if ([bpmBadgeData intValue]>50) {                     landBpmBadge = [CustomBadge customBadgeWithString:@"landBpm"];                     [landBpmBadge setFrame:CGRectMake(610, 210, landBpmBadge.frame.size.width, landBpmBadge.frame.size.height)];                     [self.view addSubview:landBpmBadge];                     [landBpmBadge autoBadgeSizeWithString:@"50+"];                     }                     else {                     landBpmBadge = [CustomBadge customBadgeWithString:@"landBpm"];                     [landBpmBadge setFrame:CGRectMake(610, 210, landBpmBadge.frame.size.width, landBpmBadge.frame.size.height)];                     [self.view addSubview:landBpmBadge];                     [landBpmBadge autoBadgeSizeWithString:bpmBadgeData];                     }                     [landBpmBadge retain];                                          }                     }                     else {                     }                     }                     */										break;				case 2:										landBpmBadge.hidden = YES;					landHrmBadge.hidden = YES;					landpaymentBadge.hidden = YES;					landstockArrow.hidden = YES;					landCandyBadge.hidden = YES;										landWithBadge.hidden = NO;					/*                     if (landWithBadge.superview !=nil) {                     landWithBadge.hidden = NO;                                          [self.openFlowViewCtrl.view bringSubviewToFront:landWithBadge.superview];                     }                     else {                     if (self.badge) {                     NSString * withBadgeData = [NSString stringWithFormat:@"%@", [[self.badge objectAtIndex:1] objectForKey:@"badgecount"]];                     if ([withBadgeData isEqualToString:@"0"] || [withBadgeData isEqualToString:@"(null)"]) {                                          }                     else {                     if ([withBadgeData intValue]>50) {                     landWithBadge = [CustomBadge customBadgeWithString:@"landWith"];                     [landWithBadge setFrame:CGRectMake(610, 210, landWithBadge.frame.size.width, landWithBadge.frame.size.height)];                     [self.view addSubview:landWithBadge];                     [landWithBadge autoBadgeSizeWithString:@"50+"];                     }                     else {                     landWithBadge = [CustomBadge customBadgeWithString:@"landWith"];                     [landWithBadge setFrame:CGRectMake(610, 210, landWithBadge.frame.size.width, landWithBadge.frame.size.height)];                     [self.view addSubview:landWithBadge];                     [landWithBadge autoBadgeSizeWithString:withBadgeData];                     }                     [landWithBadge retain];                                          }                                          }                     else {                                          }                                          }					 */										break;				case 4:										landBpmBadge.hidden = YES;					landpaymentBadge.hidden = YES;					landstockArrow.hidden = YES;					landWithBadge.hidden = YES;					landCandyBadge.hidden = YES;										landHrmBadge.hidden = NO;					/*                     if (landHrmBadge.superview !=nil) {                     landHrmBadge.hidden = NO;                                          [self.openFlowViewCtrl.view bringSubviewToFront:landHrmBadge];                     }                     else {                     if (self.badge) {                     NSString * hrmBadgeData = [NSString stringWithFormat:@"%@", [[self.badge objectAtIndex:2] objectForKey:@"badgecount"]];                     if ([hrmBadgeData isEqualToString:@"0"] || [hrmBadgeData isEqualToString:@"(null)"]) {                     }							                     else {                     if ([hrmBadgeData intValue]>50) {                     landHrmBadge = [CustomBadge customBadgeWithString:@"landHrm"];                     [landHrmBadge setFrame:CGRectMake(610, 210, landHrmBadge.frame.size.width, landHrmBadge.frame.size.height)];                     [self.view addSubview:landHrmBadge];                     [landHrmBadge autoBadgeSizeWithString:@"50+"];                                          }                     else {                     landHrmBadge = [CustomBadge customBadgeWithString:@"landHrm"];                     [landHrmBadge setFrame:CGRectMake(610, 210, landHrmBadge.frame.size.width, landHrmBadge.frame.size.height)];                     [self.view addSubview:landHrmBadge];                     [landHrmBadge autoBadgeSizeWithString:hrmBadgeData];                                          }                     [landHrmBadge retain];                                          }                                                               }                     else {                                                               }                                          }*/										break;									case 6:										landHrmBadge.hidden = YES;					landBpmBadge.hidden = YES;					landWithBadge.hidden = YES;					landpaymentBadge.hidden = YES;					landCandyBadge.hidden = YES;										landstockArrow.hidden = NO;										/*                     if (landstockArrow.superview !=nil && landstockArrow.image) {                     landstockArrow.hidden = NO;                                          [self.openFlowViewCtrl.view bringSubviewToFront:landstockArrow];                     }                     else {                     if (self.stockString != nil) {                     int plusStock = [self.stockString compare:@"+"];			                     int minusStock = [self.stockString compare:@"-"];                                          if(plusStock == 0) {                     // up                     landstockArrow = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"stock_up.png"]];	                     landstockArrow.contentMode = UIViewContentModeScaleAspectFit;                     landstockArrow.frame = CGRectMake(610, 100 , 80, 80);                     [self.openFlowViewCtrl.view addSubview:landstockArrow];                     }                     else if(minusStock == 0) {                     // down                     landstockArrow = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"stock_down.png"]];	                     landstockArrow.contentMode = UIViewContentModeScaleAspectFit;                     landstockArrow.frame = CGRectMake(610, 100 , 80, 80);                     [self.openFlowViewCtrl.view addSubview:landstockArrow];                                                               }                     else {                     // equal                     landstockArrow = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"stock_none.png"]];	                     landstockArrow.contentMode = UIViewContentModeScaleAspectFit;                     landstockArrow.frame = CGRectMake(610, 100 , 80, 80);                     [self.openFlowViewCtrl.view addSubview:landstockArrow];                                                               }			                     [landstockArrow retain];	                                          }                     }                                          */										break;									case 12:										landBpmBadge.hidden = YES;					landpaymentBadge.hidden = YES;					landstockArrow.hidden = YES;					landWithBadge.hidden = YES;					landHrmBadge.hidden = YES;										landCandyBadge.hidden = NO;					/*                     if (landCandyBadge.superview !=nil) {                     landCandyBadge.hidden = NO;                                          [self.openFlowViewCtrl.view bringSubviewToFront:landCandyBadge];                     }                     else {                     if (self.badge) {                     NSString * candyBadgeData = [NSString stringWithFormat:@"%@", [[self.badge objectAtIndex:3] objectForKey:@"badgecount"]];                     if ([candyBadgeData isEqualToString:@"0"] || [candyBadgeData isEqualToString:@"(null)"]) {                     }							                     else {                     if ([candyBadgeData intValue]>50) {                     landCandyBadge = [CustomBadge customBadgeWithString:@"landHrm"];                     [landCandyBadge setFrame:CGRectMake(610, 210, landCandyBadge.frame.size.width, landCandyBadge.frame.size.height)];                     [self.view addSubview:landCandyBadge];                     [landCandyBadge autoBadgeSizeWithString:@"50+"];                                          }                     else {                     landCandyBadge = [CustomBadge customBadgeWithString:@"landHrm"];                     [landCandyBadge setFrame:CGRectMake(610, 210, landCandyBadge.frame.size.width, landCandyBadge.frame.size.height)];                     [self.view addSubview:landCandyBadge];                     [landCandyBadge autoBadgeSizeWithString:candyBadgeData];                                          }                     [landCandyBadge retain];                                          }                                                               }                     else {                                                               }                                          }                     */					break;									default:					landBpmBadge.hidden = YES;					landHrmBadge.hidden = YES;					landWithBadge.hidden = YES;					landpaymentBadge.hidden = YES;					landstockArrow.hidden = YES;					landCandyBadge.hidden = YES;					break;			}											}			else {			//NSLog(@"else");						landBpmBadge.hidden = YES;			landHrmBadge.hidden = YES;			landWithBadge.hidden = YES;			landpaymentBadge.hidden = YES;			landstockArrow.hidden = YES;			landCandyBadge.hidden = YES;					}					}    [tmpPool release];    }// 커버플로우 버튼 액션 : 커버플로우 순서대로 index값을 가짐-(void)imageSelect{    	for (UIView *subview in self.view.subviews) {		if ([subview isKindOfClass:[CustomBadge class]]) 			[subview removeFromSuperview];			}    	imgView_stockArrow.image = nil;	[landstockArrow removeFromSuperview];	landstockArrow.image = nil;	self.badge = nil;	Clipboard *clip = [Clipboard sharedClipboard];	NSString *selectIndex = [clip clipKey:@"imageIndex"];	NSUserDefaults *userDefault = [NSUserDefaults standardUserDefaults];    	int intSelectIndex = [selectIndex intValue];	switch (intSelectIndex) {		case 0:			[self changeContentsMenu:@"boardXib"];			break;		case 1://			[self changeContentsMenu:@"paymentXib"];            [self PaymentCtrl];			break;		case 2://			[clip clipValue:[userDefault objectForKey:@"URL_BPM"] clipKey:@"WEB_LINK_URL"];//			[clip clipValue:@"BPM" clipKey:@"WEB_LINK_NAME"];			[self changeContentsMenu:@"mailXib"];			break;//		case 3://			////			[clip clipValue:[userDefault objectForKey:@"URL_EHR"] clipKey:@"WEB_LINK_URL"];////			[clip clipValue:@"HRM" clipKey:@"WEB_LINK_NAME"];//            [self EISCtrl];////            //			break;		case 3://			[clip clipValue:[userDefault objectForKey:@"URL_WITH"]  clipKey:@"WEB_LINK_URL"];//			[clip clipValue:@"WITH" clipKey:@"WEB_LINK_NAME"];//			[self changeContentsMenu:@"webXib"];            [self changeContentsMenu:@"calendarXib"];			break;		case 4:			[self ContactsCtrl:@""];			break;		case 5://			[clip clipValue:URL_iPadStock clipKey:@"WEB_LINK_URL"];//			[clip clipValue:@"주가 정보" clipKey:@"WEB_LINK_NAME"];//			[self changeContentsMenu:@"webXib"];            [self ORGNaviCtrl];			break;		case 6:            [self SettingCtrl];//			[clip clipValue:[userDefault objectForKey:@"URL_CRM"] clipKey:@"WEB_LINK_URL"];//			[clip clipValue:@"m-CRM" clipKey:@"WEB_LINK_NAME"];//			[self changeContentsMenu:@"webXib"];			break;		case 7:			[clip clipValue:[userDefault objectForKey:@"URL_EDU"] clipKey:@"WEB_LINK_URL"];			[clip clipValue:@"m-Learning" clipKey:@"WEB_LINK_NAME"];			[self changeContentsMenu:@"webXib"];			break;		case 8:			[clip clipValue:[userDefault objectForKey:@"URL_KBN"] clipKey:@"WEB_LINK_URL"];			[clip clipValue:@"KBN" clipKey:@"WEB_LINK_NAME"];			[self changeContentsMenu:@"webXib"];			break;		case 9:			[clip clipValue:[userDefault objectForKey:@"URL_MPRCSS"] clipKey:@"WEB_LINK_URL"];			[clip clipValue:@"업무표준" clipKey:@"WEB_LINK_NAME"];			[self changeContentsMenu:@"webXib"];			break;		case 10:			[clip clipValue:[userDefault objectForKey:@"URL_KTLS"] clipKey:@"WEB_LINK_URL"];			[clip clipValue:@"KTLS" clipKey:@"WEB_LINK_NAME"];			[self changeContentsMenu:@"webXib"];			break;		case 11:			[clip clipValue:[userDefault objectForKey:@"URL_CANDY"] clipKey:@"WEB_LINK_URL"];			[clip clipValue:@"올레터" clipKey:@"WEB_LINK_NAME"];			[self changeContentsMenu:@"webXib"];			break;			// 여기부터 앱통합 관련 추가부분 (2011/9)		case 12:			// 10 세일즈꾸러미			[self AIACall:@"10"];			break;		case 13:			// 12 마이캘린더 			[self AIACall:@"12"];			break;		case 14:			// 13 스마트컨설팅 			[self AIACall:@"13"];			break;		case 15:			// 11 영상카탈로그 			[self AIACall:@"11"];			break;			/*             case 17:             // 14              [self AIACall:@"14"];             break;             case 18:             // 15             [self AIACall:@"15"];             break;             case 19:             // 16              [self AIACall:@"16"];             break;			 */		case 16:            //			[self changeContentsMenu:@"settingXib"];			[self SettingCtrl];			break;            		default:			break;	}    }- (void)didReceiveMemoryWarning {    // Releases the view if it doesn't have a superview.	if (boardXib && boardXib.view.superview == nil) {		boardXib = nil;		[boardXib release];	}	if (paymentXib && paymentXib.view.superview == nil) {		paymentXib = nil;		[paymentXib release];	}	if (webXib && webXib.view.superview == nil) {		webXib = nil;		[webXib release];	}	if (qnaXib && qnaXib.view.superview == nil) {		qnaXib = nil;		[qnaXib release];	}	if (settingNavigationController && settingNavigationController.view.superview == nil) {		settingNavigationController = nil;		[settingNavigationController release];	}	/*     MobileKate2_0_iPadAppDelegate *appdelegate = (MobileKate2_0_iPadAppDelegate *)[[UIApplication sharedApplication] delegate];     if (appdelegate.window.rootViewController != self ) {     landBpmBadge.hidden = YES;     landHrmBadge.hidden = YES;     landWithBadge.hidden = YES;     landpaymentBadge.hidden = YES;     landstockArrow.hidden = YES;     landCandyBadge.hidden = YES;     }     */		/*     for (UIView *subview in self.view.subviews) {     if ([subview isKindOfClass:[CustomBadge class]]) {     subview.hidden = YES;     [subview removeFromSuperview];     subview = nil;     [subview release];     }          }*/	    [super didReceiveMemoryWarning];        // Release any cached data, images, etc. that aren't in use.}-(void)viewWillDisappear:(BOOL)animated{	if (cm != nil) {		[cm cancelCommunication];	}		//NSArray * arView = [self.view subviews];    //서브 뷰가 없다면 아래 문장 출력    	for (UIView *subview in self.view.subviews) {		if ([subview isKindOfClass:[CustomBadge class]]) 			[subview removeFromSuperview];			}		imgView_stockArrow.image = nil;	[landstockArrow removeFromSuperview];	landstockArrow.image = nil;	self.badge = nil;	}- (void)viewWillAppear:(BOOL)animated {	self.navigationController.navigationBar.hidden = YES;	self.title = @""; //--- there was showing'before title' short time in next title bar.		self.cm = [[Communication alloc] init];	self.cm.delegate = self;    	[self firstComm];    	}- (void)firstComm {    //메일 일정 뱃지		flag_comm = 1; //set comm start flag	//	NSUserDefaults *userDefault = [NSUserDefaults standardUserDefaults];//	//	NSString *encryptString = [userDefault objectForKey:@"login_id"];//	NSData *tmpID = [Base64 decode:encryptString];//	NSString *str_ID = [[NSString alloc] initWithData:tmpID encoding:NSUTF8StringEncoding];//	//    //	NSString *login_id = str_ID;//	//	NSMutableDictionary *tmpDic = [[NSMutableDictionary alloc] init];//	//	[tmpDic setValue:login_id forKey:@"userid"];//    //[tmpDic setValue:@"new1234%" forKey:@"userpw"];//	//	BOOL rslt = [cm callWithArray:tmpDic serviceUrl:URL_getBadges];	//	if(rslt != YES) {//		//	}                        NSMutableDictionary *requestDictionary = [[[NSMutableDictionary alloc] init] autorelease];    //[requestDictionary setObject:@"1001" forKey:@"compcd"]; //기본 파라메터이다.    	    // 현재 날짜와 시간.	NSDate *now = [[NSDate alloc] init];        // 날짜 포맷.	NSDateFormatter *dateFormat = [[NSDateFormatter alloc] init];	[dateFormat setDateFormat:@"yyyy-MM-dd"];			NSString *theDate = [dateFormat stringFromDate:now];//	NSLog(@"theDate[%@]",theDate);		    [requestDictionary setObject:[NSString stringWithFormat:@"%@ 00:00",theDate] forKey:@"starttime"];    [requestDictionary setObject:[NSString stringWithFormat:@"%@ 23:59",theDate] forKey:@"endtime"];    		[dateFormat release];	[now release];    	int rslt = [cm callWithArray:requestDictionary serviceUrl:URL_getBadgeCountInfo];	if (rslt != YES) {        //--- 에러 처리. 공통 모듈 구현에 따름으로 지금은 보류 ---//		UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"알림" message:@"<통신 장애 발생>"													   delegate:self cancelButtonTitle:nil otherButtonTitles:@"확인", nil];		[alert show];			[alert release];	}		}- (void)secondComm {    //--- 결재		flag_comm = 2;		//NSMutableDictionary *tmpDic = [[NSMutableDictionary alloc] init];		BOOL rslt = [cm callWithArray:nil serviceUrl:URL_PaymentBadgeInfo];		if(rslt != YES) {        //--- there's no network error message on main menu	}	}- (void)thirdComm {    //--- 주가정보		flag_comm = 3;		//NSMutableDictionary *tmpDic = [[NSMutableDictionary alloc] init];		BOOL rslt = [cm callWithArray:nil serviceUrl:URL_getStockInfo];		if(rslt != YES) {        //--- there's no network error message on main menu	}	}- (void)viewDidDisappear:(BOOL)animated {	if (cm != nil) {		[cm cancelCommunication];		cm.delegate = nil;		cm=nil;	}    executiveStaffLabel.text = nil;    	Clipboard *clipboard = [Clipboard sharedClipboard];	[clipboard clipValue:self.orientations clipKey:@"orientation"];}- (void)viewDidUnload {    [monthLabel release];    monthLabel = nil;    [monthLabel release];    monthLabel = nil;    [dateLabel release];    dateLabel = nil;    [super viewDidUnload];    // Release any retained subviews of the main view.    // e.g. self.myOutlet = nil;	//NSLog(@"openflow retain count : %d", [openFlowViewCtrl retainCount]);	openFlowViewCtrl = nil;	//NSLog(@"imgView_stockArrow retain count : %d", [imgView_stockArrow retainCount]);	imgView_stockArrow = nil;		Clipboard *clip = [Clipboard sharedClipboard];	[clip clipValue:@"0" clipKey:@"imageIndexBadge"];	}- (void)dealloc {	[paymentXib release];	[boardXib release];	[qnaXib release];	[webXib release];    [eisXib release];	[searchEmployeeXib release];		[executiveStaffLabel release];	[paymentBadge release];	[openFlowViewCtrl release];	//[menuObject release];	/*     [payment release];     [setting release];     [notice release];     [searchEmployee release];     [qna release];	 */	[combobox release];	[_stypePicker release];	[_stypePickerPopover release];	[comboBoxButton release];	[orientations release];	[withBadge release];	[hrmBadge release];	[bpmBadge release];	[landWithBadge release];	[landHrmBadge release];	[landBpmBadge release];	[landpaymentBadge release];		[badge release];	[cm release];	[landstockArrow release];	[paymentCount release];	[stockString release];	[imgView_stockArrow release];	[candyBadge release];	[landCandyBadge release];	    //	[iconMenuView release];    //	[menuScrollView release];    //	[pageControl release];	    [monthLabel release];    [monthLabel release];    [dateLabel release];	[super dealloc];}-(void)returnHomeView {    /*     for (UIView *subview in self.view.subviews ) {         NSLog(@"%@", subview);     if ([subview isKindOfClass:[CustomBadge class]])      [subview removeFromSuperview];          }     *///    if (calendarNavigationController != nil) {//        [calendarNavigationController.view removeFromSuperview];//        calendarNavigationController = nil;//    }	MobileKate2_0_iPadAppDelegate *appdelegate = (MobileKate2_0_iPadAppDelegate *)[[UIApplication sharedApplication] delegate];//    [appdelegate.mainMenuController removeFromParentViewController];	appdelegate.window.rootViewController = nil;	// add animation	CATransition *myTransition = [CATransition animation];	myTransition.timingFunction = UIViewAnimationCurveEaseInOut;	myTransition.type = kCATransitionPush;	myTransition.subtype = kCATransitionFromRight;	myTransition.duration = 0.25;		[appdelegate.window.layer addAnimation:myTransition forKey:nil];    	appdelegate.window.rootViewController = self;	self.view.hidden = NO;}- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation {    // Overriden to allow any orientation.    return YES	;}- (void)willAnimateRotationToInterfaceOrientation: (UIInterfaceOrientation)fromInterfaceOrientation duration:(NSTimeInterval)duration {     //	MainMenuController *mainController = [[MainMenuController alloc] init];        //	MobileKate2_0_iPadAppDelegate *appdelegate = (MobileKate2_0_iPadAppDelegate *)[[UIApplication sharedApplication] delegate];    //	CATransition *myTransition = [CATransition animation];	self.orientations = [NSString stringWithFormat:@"%d" ,self.interfaceOrientation];	switch (self.interfaceOrientation) {            		case UIDeviceOrientationPortrait:                        /*             for (UIView *subview in self.view.subviews) {             if ([subview isKindOfClass:[AFOpenFlowView class]])              [subview removeFromSuperview];                          }             */			self.openFlowViewCtrl.view.hidden = YES;                        //			[self.view superview];			withBadge.hidden = NO;			hrmBadge.hidden = NO;			bpmBadge.hidden = NO;			paymentBadge.hidden = NO;			candyBadge.hidden = NO;			landBpmBadge.hidden = YES;			landWithBadge.hidden = YES;			landHrmBadge.hidden = YES;			landpaymentBadge.hidden = YES;			landstockArrow.hidden = YES;			landCandyBadge.hidden = YES;            			break;		case UIDeviceOrientationPortraitUpsideDown:			/*             for (UIView *subview in self.view.subviews) {             if ([subview isKindOfClass:[AFOpenFlowView class]])              [subview removeFromSuperview];                          }			 */			self.openFlowViewCtrl.view.hidden = YES;                        //[self.view superview];			withBadge.hidden = NO;			hrmBadge.hidden = NO;			bpmBadge.hidden = NO;			paymentBadge.hidden = NO;			candyBadge.hidden = NO;			landWithBadge.hidden = YES;			landHrmBadge.hidden = YES;			landBpmBadge.hidden = YES;			landpaymentBadge.hidden = YES;			landstockArrow.hidden = YES;			landCandyBadge.hidden = YES;                        			break;		case UIDeviceOrientationLandscapeLeft:            //if ([self.openFlowViewCtrl.view superview] == nil) {                        //[self.view bringSubviewToFront:self.openFlowViewCtrl.view];            self.openFlowViewCtrl.view.hidden = NO;                        /*self.openFlowViewCtrl = [[AFOpenFlowViewController alloc] init];             CGRect cg = self.view.bounds;             cg.origin.y+=120;                          [self.openFlowViewCtrl.view setFrame:cg];             */            withBadge.hidden = YES;            hrmBadge.hidden = YES;            bpmBadge.hidden = YES;            paymentBadge.hidden = YES;            candyBadge.hidden = YES;			/*             landWithBadge.hidden = YES;             landHrmBadge.hidden = YES;             landBpmBadge.hidden = YES;             landpaymentBadge.hidden = YES;             landCandyBadge.hidden = YES;			 */            //[self.view addSubview:self.openFlowViewCtrl.view];			[noti postNotificationName:@"imageSelectBadge" object:self];                                    //}			break;		case UIDeviceOrientationLandscapeRight:            //if ([self.openFlowViewCtrl.view superview] == nil) {                        //[self.view bringSubviewToFront:self.openFlowViewCtrl.view];            self.openFlowViewCtrl.view.hidden = NO;                        /*             self.openFlowViewCtrl = [[AFOpenFlowViewController alloc] init];             CGRect cg = self.view.bounds;             cg.origin.y+=120;             [self.openFlowViewCtrl.view setFrame:cg];             */            withBadge.hidden = YES;            hrmBadge.hidden = YES;            bpmBadge.hidden = YES;            paymentBadge.hidden = YES;            candyBadge.hidden = YES;			/*             landWithBadge.hidden = YES;             landHrmBadge.hidden = YES;             landBpmBadge.hidden = YES;             landpaymentBadge.hidden = YES;             landCandyBadge.hidden = YES;			 */            //[self.view addSubview:self.openFlowViewCtrl.view];                        //}			//landWithBadge.hidden = NO;			//landHrmBadge.hidden = NO;			//landBpmBadge.hidden = NO;			//landpaymentBadge.hidden = NO;						[noti postNotificationName:@"imageSelectBadge" object:self];            			break;				}}-(void)changeContentsMenu:(NSString *)contentsName {	MobileKate2_0_iPadAppDelegate *appdelegate = (MobileKate2_0_iPadAppDelegate *)[[UIApplication sharedApplication] delegate];    	[self.view.superview removeFromSuperview];	[self.view removeFromSuperview];		CATransition *myTransition = [CATransition animation];	myTransition.timingFunction = UIViewAnimationCurveEaseInOut;	myTransition.type = kCATransitionPush;	myTransition.subtype = kCATransitionFromLeft;	myTransition.duration = 0.25;		[appdelegate.window.layer addAnimation:myTransition forKey:nil];		appdelegate.window.rootViewController = nil;		if ([contentsName isEqualToString:@"boardXib"]) {		if (boardXib) {			boardXib = nil;			[boardXib release];		}		boardXib = [[BoardSplitViewController alloc]init];		appdelegate.window.rootViewController = boardXib;		[boardXib.detailView popForFirstAppear];	}    else if ([contentsName isEqualToString:@"calendarXib"]) {		if (calendarXib) {			calendarXib = nil;			[calendarXib release];		}                calendarXib = [[CalendarMainViewController alloc]init];        calendarNavigationController = [[UINavigationController alloc] initWithRootViewController:calendarXib];        appdelegate.window.rootViewController = calendarNavigationController;        	}	else if ([contentsName isEqualToString:@"qnaXib"]) {				if (qnaXib) {			qnaXib = nil;			[qnaXib release];		}		qnaXib = [[FAQSplitViewController alloc]init];		//qnaXib = [[QnASplitViewController alloc]init];				appdelegate.window.rootViewController = qnaXib;		[qnaXib.detailView popForFirstAppear];	}	else if ([contentsName isEqualToString:@"searchEmployeeXib"]) {		// noti 문제로 항상 유지		appdelegate.window.rootViewController = searchEmployeeXib;		[searchEmployeeXib.detailView popForFirstAppear];        [searchEmployeeXib.detailView detailViewClear];	}	else if ([contentsName isEqualToString:@"paymentXib"]) {		if (paymentXib) {			paymentXib = nil;			[paymentXib release];		}                paymentXib = [[PaymentSplitViewController alloc] init];        appdelegate.window.rootViewController = paymentXib;        [paymentXib.detailView popForFirstAppear];        paymentXib.rootView.flag_reload = YES;        //        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"알림" message:@"추후 지원 예정입니다."//                                                       delegate:self cancelButtonTitle:nil otherButtonTitles:@"확인", nil];//        //        [alert show];	//        [alert release];	}	else if ([contentsName isEqualToString:@"webXib"]) {		if (webXib) {			webXib = nil;			[webXib release];		}		webXib = [[WebController alloc] initWithNibName:@"WebController" bundle:nil];		appdelegate.window.rootViewController = webXib;	}    else if ([contentsName isEqualToString:@"orgNaviXib"]){        if (orgNaviXib) {			orgNaviXib = nil;			[orgNaviXib release];		}		orgNaviXib = [[OrgNaviSpliviewController alloc] init];		appdelegate.window.rootViewController = orgNaviXib;        [orgNaviXib.detailViewNavi popForFirstAppear];            }    else if ([contentsName isEqualToString:@"mailXib"]){        if (mailXib) {			mailXib  = nil;			[mailXib release];		}        mailXib = [[MailSplitViewController alloc] initWithNibName:@"MailSplitViewController" bundle:nil];        appdelegate.window.rootViewController = mailXib;        //        [appdelegate.window makeKeyAndVisible];        //        [noti postNotificationName:@"popForFirstAppear" object:self];        [mailXib.detailView popForFirstAppear];        [mailXib.rootView loadDetailContentAtIndex:@"1"];    }else if ([contentsName isEqualToString:@"eisXib"]){        if (eisXib) {			eisXib = nil;			[eisXib release];		}        Clipboard *clip = [Clipboard sharedClipboard];        [clip clipValue:@"http://147.6.89.31/szweb/eis/viewMain.html?inWV=true" clipKey:@"WEB_LINK_URL"];        [clip clipValue:@"EIS" clipKey:@"WEB_LINK_NAME"];		eisXib = [[eisWebViewController alloc] initWithNibName:@"eisWebViewController" bundle:nil];		appdelegate.window.rootViewController = eisXib;            }}-(IBAction)MailCtrl:(id)sender {    [self changeContentsMenu:@"mailXib"];}-(IBAction)WebCtrl:(id)sender {	Clipboard *clip = [Clipboard sharedClipboard];	NSUserDefaults *userDefault = [NSUserDefaults standardUserDefaults];	int tagNumber = [(UIButton *)sender tag];	switch (tagNumber) {		case 0:			[clip clipValue:[userDefault objectForKey:@"URL_BPM"] clipKey:@"WEB_LINK_URL"];			[clip clipValue:@"BPM" clipKey:@"WEB_LINK_NAME"];			break;		case 1:			[clip clipValue:[userDefault objectForKey:@"URL_WITH"]  clipKey:@"WEB_LINK_URL"];			[clip clipValue:@"WITH" clipKey:@"WEB_LINK_NAME"];			break;		case 2:			[clip clipValue:[userDefault objectForKey:@"URL_CRM"] clipKey:@"WEB_LINK_URL"];			[clip clipValue:@"m-CRM" clipKey:@"WEB_LINK_NAME"];			break;		case 3:			[clip clipValue:[userDefault objectForKey:@"URL_EDU"] clipKey:@"WEB_LINK_URL"];			[clip clipValue:@"m-Learning" clipKey:@"WEB_LINK_NAME"];			break;		case 4:			[clip clipValue:[userDefault objectForKey:@"URL_KBN"] clipKey:@"WEB_LINK_URL"];			[clip clipValue:@"KBN" clipKey:@"WEB_LINK_NAME"];			break;		case 5: //복무			[clip clipValue:[userDefault objectForKey:@"URL_EHR"] clipKey:@"WEB_LINK_URL"];			[clip clipValue:@"HRM" clipKey:@"WEB_LINK_NAME"];			break;		case 6: //주가정보			[clip clipValue:URL_iPadStock clipKey:@"WEB_LINK_URL"];			[clip clipValue:@"주가 정보" clipKey:@"WEB_LINK_NAME"];			break;		case 7:			[clip clipValue:[userDefault objectForKey:@"URL_KTLS"] clipKey:@"WEB_LINK_URL"];			[clip clipValue:@"KTLS" clipKey:@"WEB_LINK_NAME"];			break;		case 8:			[clip clipValue:[userDefault objectForKey:@"URL_MPRCSS"] clipKey:@"WEB_LINK_URL"];			[clip clipValue:@"업무표준" clipKey:@"WEB_LINK_NAME"];			break;		case 9:			[clip clipValue:[userDefault objectForKey:@"URL_CANDY"] clipKey:@"WEB_LINK_URL"];			[clip clipValue:@"올레터" clipKey:@"WEB_LINK_NAME"];			break;        case 10:			[clip clipValue:@"http://147.6.89.31/szweb/eis/viewMain.html?inWV=true" clipKey:@"WEB_LINK_URL"];			[clip clipValue:@"eis" clipKey:@"WEB_LINK_NAME"];			break;		default:			break;	}		[self changeContentsMenu:@"webXib"];}-(IBAction)PaymentCtrl{//    NSUserDefaults *userDefault = [NSUserDefaults standardUserDefaults];//    if ([[userDefault objectForKey:@"login_reserved1"]isEqualToString:@"1014710363"]||[[userDefault objectForKey:@"login_reserved1"]isEqualToString:@"1014710328"]) {    [self changeContentsMenu:@"paymentXib"];//    if ([[userDefault objectForKey:@"login_reserved1"]isEqualToString:@"1014710363"]||[[userDefault objectForKey:@"login_reserved1"]isEqualToString:@"1014710328"]) {//        [self changeContentsMenu:@"paymentXib"];//    }else{//        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"알림" message:@"추후 지원 예정입니다."//                                                       delegate:self cancelButtonTitle:nil otherButtonTitles:@"확인", nil];//        //        [alert show];	//        [alert release];//    }}-(IBAction)StockCtrl{	[self changeContentsMenu:@"stockXib"];}-(IBAction)ContactsCtrl:(id)sender{    ContactMainViewController *contactMainViewController = [[ContactMainViewController alloc] initWithNibName:@"ContactMainViewController" bundle:nil];    [contactMainViewController contactDefault];	contactsNavigationController = [[UINavigationController alloc] initWithRootViewController:contactMainViewController];	contactsNavigationController.navigationBar.barStyle = UIBarStyleBlackOpaque;	contactsNavigationController.modalPresentationStyle = UIModalPresentationFormSheet;    [contactsNavigationController disablesAutomaticKeyboardDismissal];	[contactMainViewController release];		[self presentModalViewController:contactsNavigationController animated:YES];    //appdelegate.window.rootViewController = settingNavigationController;		[contactsNavigationController release];}-(IBAction)SettingCtrl{	/*     MobileKate2_0_iPadAppDelegate *appdelegate = (MobileKate2_0_iPadAppDelegate *)[[UIApplication sharedApplication] delegate];          if (appdelegate.window.rootViewController != self) {     [self returnHomeView];     }     */	/*     CATransition *myTransition = [CATransition animation];     myTransition.timingFunction = UIViewAnimationCurveEaseInOut;     myTransition.type = kCATransitionPush;     myTransition.subtype = kCATransitionFromLeft;     myTransition.duration = 0.25;               //appdelegate.window.rootViewController = self;          [appdelegate.window.layer addAnimation:myTransition forKey:nil];     //appdelegate.window.rootViewController = self;     //[self.view.superview removeFromSuperview];     //[self.view removeFromSuperview];          if(settingNavigationController) {     settingNavigationController = nil;     [settingNavigationController release];     }          SettingTableController *settingTableController = [[SettingTableController alloc] initWithNibName:@"SettingTableController" bundle:nil];     //UINavigationController *     settingNavigationController = [[UINavigationController alloc] initWithRootViewController:settingTableController];     settingNavigationController.navigationBar.barStyle = UIBarStyleBlackOpaque;     [settingTableController release];          //UIWindow *topWindow = [[UIApplication sharedApplication] keyWindow];     //[topWindow addSubview:settingNavigationController.view];     appdelegate.window.rootViewController = nil;     appdelegate.window.rootViewController = settingNavigationController;          */		SettingTableController *settingTableController = [[SettingTableController alloc] initWithNibName:@"SettingTableController" bundle:nil];	settingNavigationController = [[UINavigationController alloc] initWithRootViewController:settingTableController];	settingNavigationController.navigationBar.barStyle = UIBarStyleBlackOpaque;	settingNavigationController.modalPresentationStyle = UIModalPresentationFormSheet;	[settingTableController release];		[self presentModalViewController:settingNavigationController animated:YES];		//appdelegate.window.rootViewController = settingNavigationController;		[settingNavigationController release];		/*     //NSLog(@"BADGE DATA : %@, appr. : %@", self.badge, self.paymentCount);     if([self.orientations isEqualToString:@"3"] || [self.orientations isEqualToString:@"4"]) {     [self viewWillAppear:YES];     }*/    }-(IBAction)BoardCtrl{	[self changeContentsMenu:@"boardXib"];}-(IBAction)CalendarCtrl{    [self changeContentsMenu:@"calendarXib"];}//-(IBAction)CalendarCtrl{//    //	[self changeContentsMenu:@"calendarXib"];//    CalendarMainViewController *calendarMainViewController = [[CalendarMainViewController alloc]initWithNibName:@"CalendarMainViewController" bundle:nil];//    calendarNavigationController = [[UINavigationController alloc] initWithRootViewController:calendarMainViewController];//	calendarNavigationController.navigationBar.barStyle = UIBarStyleBlackOpaque;//    //    CGRect frame = [[calendarNavigationController navigationBar] frame];//    //    //    frame.origin.y = 0; // Was 20, set to 0 to not take into account the status bar.//    calendarNavigationController.view.frame = CGRectMake(0, 0, 768 , 1004);//    //    [[calendarNavigationController navigationBar] setFrame:frame];//	[calendarMainViewController release];//	[self.view addSubview:calendarNavigationController.view];//	NSLog(@"%@", self.view.subviews);//}-(IBAction)QnACtrl{	[self changeContentsMenu:@"qnaXib"];}-(IBAction)SearchEmployeeCtrl{	[self changeContentsMenu:@"searchEmployeeXib"];}- (IBAction)textFieldDoneEditing:(id)sender {		[self.executiveStaffLabel resignFirstResponder];	//[noti postNotificationName:@"inputCheckSearch" object:self];	[self inputCheckSearch];	}- (BOOL)textFieldShouldReturn:(UITextField *)executiveStaffLabel {    //NSLog(@"Keyboard Done Pressed");	    [self.executiveStaffLabel resignFirstResponder];    //[noti postNotificationName:@"inputCheckSearch" object:self];	[self inputCheckSearch];    	return YES;}-(void)customTabWebView{	[self changeContentsMenu:@"webXib"];}-(void)inputCheckSearch{		if([executiveStaffLabel.text length] >= 2 ) {				// 입력값 넣기		NSString *typingvalue = executiveStaffLabel.text;		Clipboard *clipboard = [Clipboard sharedClipboard];		[clipboard clipValue:typingvalue clipKey:@"typingvalue"];		[noti postNotificationName:@"listClean" object:self];		[self.stypePickerPopover dismissPopoverAnimated:YES];        		[self changeContentsMenu:@"searchEmployeeXib"];		//[noti postNotificationName:@"comboboxPush2" object:self];		[(SearchEmployeeRoot *)searchEmployeeXib.rootView comboboxPush2];		//[noti postNotificationName:@"searchEmployee" object:self];		[(SearchEmployeeRoot *)searchEmployeeXib.rootView searchEmployee];	}	else if([executiveStaffLabel.text length] < 2 ){		UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"알림" message:@"검색어를 2자리 이상 입력해 주세요."													   delegate:self cancelButtonTitle:nil otherButtonTitles:@"확인", nil];				[alert show];			[alert release];	}	}//조직도-(IBAction)ORGNaviCtrl{	[self changeContentsMenu:@"orgNaviXib"];    }-(IBAction)EISCtrl{	[self changeContentsMenu:@"eisXib"];    }#pragma mark StypePickerDelegate- (void)stypePickerSelected:(NSString *)stype {	Clipboard *clipboard = [Clipboard sharedClipboard];        if ([stype compare:@"전 체"] == NSOrderedSame) {		combobox.text = stype;		[clipboard clipValue:@"전 체" clipKey:@"stype"];    } else if ([stype compare:@"이 름"] == NSOrderedSame) {		combobox.text = stype;		[clipboard clipValue:@"이 름" clipKey:@"stype"];    } else if ([stype compare:@"부서명"] == NSOrderedSame){		combobox.text = stype;		[clipboard clipValue:@"부서명" clipKey:@"stype"];            }else if ([stype compare:@"사내번호"] == NSOrderedSame){		combobox.text = stype;		[clipboard clipValue:@"사내번호" clipKey:@"stype"];            }else if ([stype compare:@"휴대폰"] == NSOrderedSame){		combobox.text = stype;		[clipboard clipValue:@"휴대폰" clipKey:@"stype"];            }    [self.stypePickerPopover dismissPopoverAnimated:YES];	    		}#pragma mark Callbacks- (IBAction)comboboxControl:(id)sender{	if (_stypePicker == nil) {        self.stypePicker = [[[StypePickerController alloc] initWithStyle:UITableViewStylePlain] autorelease];        //set popover content size        _stypePicker.delegate = self;        self.stypePickerPopover = [[[UIPopoverController alloc] initWithContentViewController:_stypePicker] autorelease];                  }	CGRect cgv = self.combobox.bounds;    	if ([self.orientations isEqualToString:@"1"] || [self.orientations isEqualToString:@"2"]) {		cgv.size.width+=800;		cgv.size.height+=45;        	}	else if ([self.orientations isEqualToString:@"3"] || [self.orientations isEqualToString:@"4"]) {		cgv.size.width+=1315;		cgv.size.height+=45;        	}    		    // [self.stypePickerPopover presentPopoverFromRect:cgv	//										 inView:self.view permittedArrowDirections:UIPopoverArrowDirectionUp animated:YES];	[self.stypePickerPopover presentPopoverFromBarButtonItem:popoverTemp permittedArrowDirections:UIPopoverArrowDirectionUp animated:YES];	}-(void)willStartCommunication:(id *)param1 requestDictionary:(NSMutableDictionary *)_dic{	}-(void)didErrorCommunication:(NSError *)error requestDictionary:(NSMutableDictionary *)_dic{	}-(void)didEndCommunication:(NSDictionary *)_resultDic requestDictionary:(NSMutableDictionary *)_dic{	NSDictionary *singles = (NSDictionary *)[_resultDic valueForKey:@"result"];	//NSLog(@"detail total count: %@", [singles valueForKey:@"totalcount"]);		NSString *rsltCode = [singles objectForKey:@"code"];	if(rsltCode == nil) {		return;	}		if([rsltCode intValue] == 0){		//--- success		if ([self.orientations isEqualToString:@"1"] || [self.orientations isEqualToString:@"2"]) {			/*             withBadge.hidden = NO;             hrmBadge.hidden = NO;             bpmBadge.hidden = NO;             paymentBadge.hidden = NO;             candyBadge.hidden = NO;			 */			withBadge.hidden = YES;			hrmBadge.hidden = YES;			bpmBadge.hidden = YES;			paymentBadge.hidden = YES;			candyBadge.hidden = YES;		}		else if([self.orientations isEqualToString:@"3"] || [self.orientations isEqualToString:@"4"]) {			withBadge.hidden = YES;			hrmBadge.hidden = YES;			bpmBadge.hidden = YES;			paymentBadge.hidden = YES;			candyBadge.hidden = YES;					}		//--- process by each mode		if (flag_comm == 1) {			//self.badge = (NSArray *)[_resultDic valueForKey:@"badgeinfo"];//메일 일정 뱃지로 대체 			//			NSString * bpmBadgeData = [NSString stringWithFormat:@"%@", [[self.badge objectAtIndex:0] objectForKey:@"badgecount"]];//			NSString * withBadgeData = [NSString stringWithFormat:@"%@", [[self.badge objectAtIndex:1] objectForKey:@"badgecount"]];//			NSString * hrmBadgeData = [NSString stringWithFormat:@"%@", [[self.badge objectAtIndex:2] objectForKey:@"badgecount"]];//			NSString * candyBadgeData = [NSString stringWithFormat:@"%@", [[self.badge objectAtIndex:3] objectForKey:@"badgecount"]];            NSString * bpmBadgeData = [_resultDic objectForKey:@"appointmentcnt"];//일정			NSString * withBadgeData = [_resultDic objectForKey:@"mailcnt"];//메일//            NSString * bpmBadgeData = @"1";//			NSString * withBadgeData = @"3";			NSString * hrmBadgeData = @"0";			NSString * candyBadgeData = @"0";			/*             // test             NSString * bpmBadgeData = @"1";             NSString * withBadgeData = @"1";             NSString * hrmBadgeData = @"1";             NSString * candyBadgeData = @"1";             */			if ([bpmBadgeData isEqualToString:@"0"] || [bpmBadgeData isEqualToString:@"(null)"]) {				bpmBadge = nil;				landBpmBadge = nil;			}				else {				if ([bpmBadgeData intValue]>50) {					// Create Badge					bpmBadge = nil;					bpmBadge = [CustomBadge customBadgeWithString:@"50+"];					// Set Position of Badge 					[bpmBadge setFrame:CGRectMake(700, 150, bpmBadge.frame.size.width, bpmBadge.frame.size.height)];					// Add Badges to View					[self.view addSubview:bpmBadge];					// Change text afterwards					//[bpmBadge autoBadgeSizeWithString:@"50+"];										landBpmBadge = nil;					landBpmBadge = [CustomBadge customBadgeWithString:@"50+"];					[landBpmBadge setFrame:CGRectMake(630, 260, landBpmBadge.frame.size.width, landBpmBadge.frame.size.height)];					[self.view addSubview:landBpmBadge];									}				else {					// Create Badge					bpmBadge = nil;					bpmBadge = [CustomBadge customBadgeWithString:bpmBadgeData];					// Set Position of Badge 					[bpmBadge setFrame:CGRectMake(700, 150, bpmBadge.frame.size.width, bpmBadge.frame.size.height)];					// Add Badges to View					[self.view addSubview:bpmBadge];					// Change text afterwards					//[bpmBadge autoBadgeSizeWithString:bpmBadgeData];										landBpmBadge = nil;					landBpmBadge = [CustomBadge customBadgeWithString:bpmBadgeData];					[landBpmBadge setFrame:CGRectMake(630, 260, landBpmBadge.frame.size.width, landBpmBadge.frame.size.height)];					[self.view addSubview:landBpmBadge];									}				if([self.orientations isEqualToString:@"3"] || [self.orientations isEqualToString:@"4"]) {					bpmBadge.hidden = YES;					landBpmBadge.hidden = YES;				} else {					landBpmBadge.hidden = YES;				}				[bpmBadge retain];				[landBpmBadge retain];				//NSLog(@"bpmBadge retain : %d", [bpmBadge retainCount]);			}			if ([withBadgeData isEqualToString:@"0"] || [withBadgeData isEqualToString:@"(null)"]) {				withBadge = nil;				landWithBadge = nil;			}			else {				if ([withBadgeData intValue]>50) {					withBadge = nil;					withBadge = [CustomBadge customBadgeWithString:@"50+"];					[withBadge setFrame:CGRectMake(510, 150, withBadge.frame.size.width, withBadge.frame.size.height)];					[self.view addSubview:withBadge];					//[withBadge autoBadgeSizeWithString:@"50+"];										landWithBadge = nil;					landWithBadge = [CustomBadge customBadgeWithString:@"50+"];					[landWithBadge setFrame:CGRectMake(630, 260, landWithBadge.frame.size.width, landWithBadge.frame.size.height)];					[self.view addSubview:landWithBadge];				}				else {					withBadge = nil;					withBadge = [CustomBadge customBadgeWithString:withBadgeData];					[withBadge setFrame:CGRectMake(510, 150, withBadge.frame.size.width, withBadge.frame.size.height)];					[self.view addSubview:withBadge];					//[withBadge autoBadgeSizeWithString:withBadgeData];										landWithBadge = nil;					landWithBadge = [CustomBadge customBadgeWithString:withBadgeData];					[landWithBadge setFrame:CGRectMake(630, 260, landWithBadge.frame.size.width, landWithBadge.frame.size.height)];					[self.view addSubview:landWithBadge];										if([self.orientations isEqualToString:@"3"] || [self.orientations isEqualToString:@"4"]) {						withBadge.hidden = YES;						landWithBadge.hidden = YES;					} else {						landWithBadge.hidden = YES;					}									}								[withBadge retain];				[landWithBadge retain];				//NSLog(@"withBadge retain : %d", [withBadge retainCount]);			}			if ([hrmBadgeData isEqualToString:@"0"] || [hrmBadgeData isEqualToString:@"(null)"]) {				hrmBadge = nil;				landHrmBadge = nil;			}			else {				if ([hrmBadgeData intValue]>50) {					hrmBadge = nil;					hrmBadge = [CustomBadge customBadgeWithString:@"50+"];					[hrmBadge setFrame:CGRectMake(670, 20, hrmBadge.frame.size.width, hrmBadge.frame.size.height)];					[self.view addSubview:hrmBadge];					//[hrmBadge autoBadgeSizeWithString:@"50+"];										landHrmBadge = nil;					landHrmBadge = [CustomBadge customBadgeWithString:@"50+"];					[landHrmBadge setFrame:CGRectMake(610, 210, landHrmBadge.frame.size.width, landHrmBadge.frame.size.height)];					[self.view addSubview:landHrmBadge];				}				else {					hrmBadge = nil;					hrmBadge = [CustomBadge customBadgeWithString:hrmBadgeData];					[hrmBadge setFrame:CGRectMake(670, 20, hrmBadge.frame.size.width, hrmBadge.frame.size.height)];					[self.view addSubview:hrmBadge];					//[hrmBadge autoBadgeSizeWithString:hrmBadgeData];										landHrmBadge = nil;					landHrmBadge = [CustomBadge customBadgeWithString:hrmBadgeData];					[landHrmBadge setFrame:CGRectMake(610, 210, landHrmBadge.frame.size.width, landHrmBadge.frame.size.height)];					[self.view addSubview:landHrmBadge];										if([self.orientations isEqualToString:@"3"] || [self.orientations isEqualToString:@"4"]) {						hrmBadge.hidden = YES;						landHrmBadge.hidden = YES;					} else {						landHrmBadge.hidden = YES;					}									}				[hrmBadge retain];				[landHrmBadge retain];				//NSLog(@"hrmBadge retain : %d", [hrmBadge retainCount]);			}						if ([candyBadgeData isEqualToString:@"0"] || [candyBadgeData isEqualToString:@"(null)"]) {				// test				candyBadge = nil;				landCandyBadge = nil;				/*				 candyBadge = [CustomBadge customBadgeWithString:@"candy"];				 [candyBadge setFrame:CGRectMake(490, 334, candyBadge.frame.size.width, candyBadge.frame.size.height)];				 [self.view addSubview:candyBadge];				 [candyBadge autoBadgeSizeWithString:@"50+"];				 				 [candyBadge retain];				 */							}			else {				if ([candyBadgeData intValue]>50) {					candyBadge = nil;					candyBadge = [CustomBadge customBadgeWithString:@"50+"];					[candyBadge setFrame:CGRectMake(130, 662, candyBadge.frame.size.width, candyBadge.frame.size.height)];					[self.view addSubview:candyBadge];					//[candyBadge autoBadgeSizeWithString:@"50+"];										landCandyBadge = nil;					landCandyBadge = [CustomBadge customBadgeWithString:@"50+"];					[landCandyBadge setFrame:CGRectMake(610, 210, landCandyBadge.frame.size.width, landCandyBadge.frame.size.height)];					[self.view addSubview:landCandyBadge];									}				else {					candyBadge = nil;					candyBadge = [CustomBadge customBadgeWithString:candyBadgeData];					[candyBadge setFrame:CGRectMake(130, 662, candyBadge.frame.size.width, candyBadge.frame.size.height)];					[self.view addSubview:candyBadge];					//[candyBadge autoBadgeSizeWithString:candyBadgeData];										landCandyBadge = nil;					landCandyBadge = [CustomBadge customBadgeWithString:candyBadgeData];					[landCandyBadge setFrame:CGRectMake(610, 210, landCandyBadge.frame.size.width, landCandyBadge.frame.size.height)];					[self.view addSubview:landCandyBadge];										if([self.orientations isEqualToString:@"3"] || [self.orientations isEqualToString:@"4"]) {						candyBadge.hidden = YES;						landCandyBadge.hidden = YES;					} else {						landCandyBadge.hidden = YES;					}									}				[candyBadge retain];				[landCandyBadge retain];				//NSLog(@"candyBadge retain : %d", [candyBadge retainCount]);			}						[self secondComm];					}		else if(flag_comm == 2) {			//payment			NSDictionary *dic_approvalCountInfo = [_resultDic objectForKey:@"approvallistcountinfo"];			self.paymentCount = [dic_approvalCountInfo objectForKey:@"count"];//            self.paymentCount = @"4";			if (self.paymentCount) {				if ([self.paymentCount isEqualToString:@"0"] || [self.paymentCount isEqualToString:@"(null)"]) {					NSInteger candyBadgeCount = [[[self.badge objectAtIndex:3] objectForKey:@"badgecount"] intValue];					[[UIApplication sharedApplication] setApplicationIconBadgeNumber:candyBadgeCount];					paymentBadge = nil;					landpaymentBadge = nil;									}				else {					NSInteger badgeTmp = [self.paymentCount intValue];					NSInteger candyBadgeCount = [[[self.badge objectAtIndex:3] objectForKey:@"badgecount"] intValue];					badgeTmp += candyBadgeCount;										[[UIApplication sharedApplication] setApplicationIconBadgeNumber:badgeTmp];										if ([paymentCount intValue]>50) {						paymentBadge = nil;						paymentBadge = [CustomBadge customBadgeWithString:@"50+"];						[paymentBadge setFrame:CGRectMake(330, 150, paymentBadge.frame.size.width, paymentBadge.frame.size.height)];						[self.view addSubview:paymentBadge];						//[paymentBadge retain];						//[paymentBadge autoBadgeSizeWithString:@"50+"];						landpaymentBadge = nil;						landpaymentBadge = [CustomBadge customBadgeWithString:@"50+"];						[landpaymentBadge setFrame:CGRectMake(630, 260, landpaymentBadge.frame.size.width, landpaymentBadge.frame.size.height)];						[self.view addSubview:landpaymentBadge];												//[landpaymentBadge autoBadgeSizeWithString:@"50+"];											}					else {						paymentBadge = nil;						paymentBadge = [CustomBadge customBadgeWithString:self.paymentCount];						[paymentBadge setFrame:CGRectMake(330, 150, paymentBadge.frame.size.width, paymentBadge.frame.size.height)];						[self.view addSubview:paymentBadge];						//						//[paymentBadge autoBadgeSizeWithString:self.paymentCount];												landpaymentBadge = nil;						landpaymentBadge = [CustomBadge customBadgeWithString:self.paymentCount];						[landpaymentBadge setFrame:CGRectMake(630, 260, landpaymentBadge.frame.size.width, landpaymentBadge.frame.size.height)];						[self.view addSubview:landpaymentBadge];											}					if([self.orientations isEqualToString:@"3"] || [self.orientations isEqualToString:@"4"]) {						paymentBadge.hidden = YES;						landpaymentBadge.hidden = YES;					} else {						landpaymentBadge.hidden = YES;					}                    					[paymentBadge retain];					[landpaymentBadge retain];					//NSLog(@"paymentBadge retain : %d", [paymentBadge retainCount]);					//NSLog(@"landpaymentBadge retain : %d", [landpaymentBadge retainCount]);				}											}			/*			 else {			 paymentBadge = [CustomBadge customBadgeWithString:@"payment"];			 [paymentBadge setFrame:CGRectMake(450, 50, paymentBadge.frame.size.width, paymentBadge.frame.size.height)];			 [self.view addSubview:paymentBadge];			 [paymentBadge autoBadgeSizeWithString:self.paymentCount];			 [paymentBadge retain];			 }*/									[self thirdComm];								}		else if(flag_comm == 3) {			//stock			NSDictionary *dic_stockInfo = [_resultDic objectForKey:@"stockinfo"];			NSString *str_incrate = [dic_stockInfo objectForKey:@"incrate"];						str_incrate = [str_incrate substringToIndex:1];						self.stockString = str_incrate;			if (self.stockString) {				int plusRslt = [str_incrate compare:@"+"];							int minusRslt = [str_incrate compare:@"-"];								if(plusRslt == 0) {					// up					imgView_stockArrow.image = [UIImage imageNamed:@"stock_up.png"];											landstockArrow = nil;					landstockArrow = [[[UIImageView alloc] initWithImage:[UIImage imageNamed:@"stock_up.png"]] autorelease];						landstockArrow.contentMode = UIViewContentModeScaleAspectFit;					landstockArrow.frame = CGRectMake(610, 100 , 80, 80);					[self.openFlowViewCtrl.view addSubview:landstockArrow];									}				else if(minusRslt == 0) {					// down					imgView_stockArrow.image = [UIImage imageNamed:@"stock_down.png"];											landstockArrow = nil;					landstockArrow = [[[UIImageView alloc] initWithImage:[UIImage imageNamed:@"stock_down.png"]] autorelease];						landstockArrow.contentMode = UIViewContentModeScaleAspectFit;					landstockArrow.frame = CGRectMake(610, 100 , 80, 80);					[self.openFlowViewCtrl.view addSubview:landstockArrow];									}				else {					// equal					imgView_stockArrow.image = [UIImage imageNamed:@"stock_none.png"];											landstockArrow = nil;					landstockArrow = [[[UIImageView alloc] initWithImage:[UIImage imageNamed:@"stock_none.png"]] autorelease];						landstockArrow.contentMode = UIViewContentModeScaleAspectFit;					landstockArrow.frame = CGRectMake(610, 100 , 80, 80);					[self.openFlowViewCtrl.view addSubview:landstockArrow];				}			}			[landstockArrow retain];			//[imgView_stockArrow retain];			//NSLog(@"imgView_stockArrow load retain : %d", [imgView_stockArrow retainCount]);			//NSLog(@"landstockArrow load retain : %d", [landstockArrow retainCount]);								}		else if (flag_comm == 4) {			// App-In-App Communication mode			NSString *downUrlInfo = [_resultDic objectForKey:@"downurl"];			NSString *customUrlInfo = [_resultDic objectForKey:@"customurl"];						NSURL *testUrl = [NSURL URLWithString:customUrlInfo];			BOOL testURLOpen = [[UIApplication sharedApplication] canOpenURL:testUrl];						if (testURLOpen) {                				[[UIApplication sharedApplication] openURL:testUrl];			} else {								Clipboard *clipboard = [Clipboard sharedClipboard];				[clipboard clipValue:downUrlInfo clipKey:@"customDownloadURL"];								//NSString *message = [NSString stringWithFormat:@"fail open URL: %@", testString];				UIAlertView *openURLAlert = [[UIAlertView alloc] initWithTitle:@"애플리케이션 설치"																	   message:@"해당 애플리케이션이 설치되어 있지 않습니다. 확인 버튼을 누르시면 다운로드 페이지로 이동합니다." delegate:self															 cancelButtonTitle:@"취소" otherButtonTitles:@"확인", nil];								openURLAlert.tag = 999;				[openURLAlert show];				[openURLAlert release];								// open download page			}								}		else {			// no more comms					}		[noti postNotificationName:@"imageSelectBadge" object:self];				if ([self.orientations isEqualToString:@"1"] || [self.orientations isEqualToString:@"2"]) {						withBadge.hidden = NO;			hrmBadge.hidden = NO;			bpmBadge.hidden = NO;			paymentBadge.hidden = NO;			candyBadge.hidden = NO;		}			}	else if([rsltCode intValue] == 1) {		//--- 인증에러		if(flag_comm == 2) {			// 결재의 경우 KT사용자가 아니면 인증에러 발생함. 이 경우 저장되어있는 캔디 뱃지만 업데이트함. 			NSInteger candyBadgeCount = [[[self.badge objectAtIndex:3] objectForKey:@"badgecount"] intValue];			//NSLog(@"%d", candyBadgeCount);			self.paymentCount = 0;			paymentBadge.hidden = YES;			paymentBadge = nil;			landpaymentBadge = nil;						[[UIApplication sharedApplication] setApplicationIconBadgeNumber:candyBadgeCount];						[self thirdComm];		} else if(flag_comm == 4) {			NSString *string3 = [singles objectForKey:@"errdesc"];			UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"알림" message:string3 delegate:nil                                                  cancelButtonTitle:@"OK" otherButtonTitles:nil]; 			[alert show]; 			[alert release]; 		}		//[self thirdComm];	}		}#pragma mark -#pragma mark App-In-App Action & Paging Control Methods -(IBAction)AIACtrl:(id)sender {    	NSString *tagNumber = [NSString stringWithFormat:@"%d", [(UIButton *)sender tag]];	[self AIACall:tagNumber];    }-(void)AIACall:(NSString *)tagnum {	// 주가정보 통신까지 완료된경우 or 이미 한번 AiA 버튼을 누른 적이 있는 경우	if(flag_comm == 3 || flag_comm == 4) {		NSUserDefaults *userDefault = [NSUserDefaults standardUserDefaults];		int tagNumber = [tagnum intValue];		NSString *urlString = nil;				switch (tagNumber) {			case 10:				// 세일즈꾸러미				urlString = [userDefault objectForKey:@"URL_SALESPACK"];								break;			case 11:				// 영상카탈로그				urlString = [userDefault objectForKey:@"URL_SALESCATALOG"];								break;			case 12:				// 마이캘린더				urlString = [userDefault objectForKey:@"URL_MYCALENDAR"];								break;			case 13:				// 스마트컨설팅				urlString = [userDefault objectForKey:@"URL_SMARTCONSULTING"];								break;				/* 반영제외됨                  case 14:                 // 테스트, 모바일네오스                 urlString = [userDefault objectForKey:@"URL_MOBILENEOSS"];                                  break;                                  case 15:                 // 모바일샵                 urlString = [userDefault objectForKey:@"URL_MOBILESHOP"];                                  break;                 case 16:                 // 전자청약                 urlString = [userDefault objectForKey:@"URL_MOBILEAPPLICANT"];                                  break;                 */			default:				break;		}				// set communication flag		flag_comm = 4;				BOOL rslt = [cm callWithArray:nil serviceUrl:urlString];			if(rslt != YES) {			//--- there's no network error message on main menu		}	}}-(void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex{	if (alertView.tag == 999) {		//--- 다운로드페이지로 리다이렉트		if(buttonIndex !=[alertView cancelButtonIndex])		{				Clipboard *clip = [Clipboard sharedClipboard];			NSURL *url = [NSURL URLWithString:[clip clipKey:@"customDownloadURL"]];			[[UIApplication sharedApplication] openURL:url];		}			}	else {		//--- nothing tag ---//	}}//- (IBAction) pageControllChanged:(id)sender {//	//	int page = self.pageControl.currentPage;//	//	// update the scroll view to the appropriate page//    CGRect frame = self.menuScrollView.frame;//    frame.origin.x = frame.size.width * page;//    frame.origin.y = 0;//    [self.menuScrollView scrollRectToVisible:frame animated:YES];//    //	// Set the boolean used when scrolls originate from the UIPageControl. See scrollViewDidScroll: above.//    pageControlUsed = YES;//	//	pageControl.currentPage = page;//	//}// At the begin of scroll dragging, reset the boolean used when scrolls originate from the UIPageControl//- (void)scrollViewWillBeginDragging:(UIScrollView *)scrollView//{//    pageControlUsed = NO;//}////// At the end of scroll animation, reset the boolean used when scrolls originate from the UIPageControl//- (void)scrollViewDidEndDecelerating:(UIScrollView *)scrollView//{//    pageControlUsed = NO;//}////- (void)scrollViewDidScroll:(UIScrollView *)scrollView {//	if (pageControlUsed)//    {//        // do nothing - the scroll was initiated from the page control, not the user dragging//        return;//    }//	//    // Switch the indicator when more than 50% of the previous/next page is visible//    CGFloat pageWidth = scrollView.frame.size.width;//    int page = floor((scrollView.contentOffset.x - pageWidth / 2) / pageWidth) + 1;//    pageControl.currentPage = page;////}//@end